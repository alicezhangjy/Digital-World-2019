"""
Created on Mon Feb 25 09:15:08 2019

@author: Alice Jingyu
"""
#Question 1
import random

craps=set([2,3,12])
naturals=set([7,11])

def roll_two_dices():
    #for i in range(2):
    return random.randint(1,6), random.randint(1,6)

def print_lose():
    print("You lose")

def print_win():
    print("You win")

def print_point(p):
    print("Your points are", p)

def is_craps(n):
    if n in craps:
        return True

        
def is_naturals(n):
    if n in naturals:
        return True


# ATTENTION!
# You shouldn't need to edit the function below

def play_craps():
    point=-1
    while True:
        n1,n2=roll_two_dices()
        sumn=n1+n2
        print ('You rolled %d + %d = %d'%(n1,n2,sumn))   #initial points obtained here
        if point==-1:              #At the initialisation of point == -1 (see line 29)
            if is_craps(sumn):  #if the sum is in the set of craps
                print_lose()     #then it is an immediate loss
                return 0
            elif is_naturals(sumn):   #if the sum is in the set of naturals
                print_win()     #then it is an immediate  win
                return 1
            point=sumn
            print_point(point)
        else:
            if sumn==7:
                print_lose()
                return 0
            elif sumn==point:
                print_win()
                return 1   #goal of the game is to keep rolling dice until the sum == points obtained
   
            
            
#Question 2
def leap_year(year):
    if year % 4 != 0:
        return False
    elif year % 100 != 0:
        return True
    elif year % 400 != 0:
        return False 
    else:
        return True

def day_of_week_jan1(year):
    def R(y,x):
        return y%x
    
    d = R(1 + 5*R(year - 1, 4) + 4*R(year -1, 100) + 6*R(year - 1, 400), 7)
    return d

def num_days_in_month(month_num, leap_year):
    if leap_year is True:
        if month_num == 1 or month_num == 3 or month_num == 5 or month_num == 7 or month_num == 8 or month_num == 10 or month_num == 12:
                number_of_days = 31
        elif month_num == 2:
                number_of_days = 29
        else:
                number_of_days = 30
        return number_of_days
    if leap_year is False:
        if month_num == 2:
                number_of_days = 28
        elif month_num == 2 or month_num == 4 or month_num == 6 or month_num == 9 or month_num == 11:
                number_of_days = 30
        else:
                number_of_days = 31
        return number_of_days
            
   ''' def construct_cal_month(month_num, first_day_of_month, num_days_in_month):
       month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    result = [month_names[month_num-1]]
    days_in_month= [month_num, '']
    d = first_day_of_month
    first_day = 1
    total_counter = num_days_in_month + d
    
    for i in range(0,total_counter):
        if i < d:
            days_in_month.append(" ")
        elif i  >= d:
            days_in_month.append(first_day)
            first_day += 1
                                                                                   
    return days_in_month'''

def construct_cal_month(month_num, first_day_of_month, num_days_in_month):
    month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    
    result = [month_names[month_num-1]]
    
    day_of_the_month = 1
    day_of_the_week = first_day_of_month
    
    week = '   ' * first_day_of_month
    
    while day_of_the_month <= num_days_in_month:
        if day_of_the_week <= 6:
            week += "{:>3}".format(day_of_the_month)
            day_of_the_month += 1
            day_of_the_week += 1
        else:
            result.append(week)
            week = ""
            day_of_the_week = 0
        
    result.append(week)
    
    return result

            
def construct_cal_year(year):
    updated_list =[year]
    leap = leap_year(year)
    month_num = 1
    first_day_of_themonth = day_of_week_jan1(year)
    
    while month_num < 13:
        num_days_inamonth = num_days_in_month(month_num, leap)
        updated_list.append(construct_cal_month(month_num,first_day_of_themonth, num_days_inamonth))
        first_day_of_themonth = (first_day_of_themonth + num_days_inamonth) % 7
        month_num += 1
    return updated_list

def display_calendar(year):
    assert(1800 <= year <= 2099)
    result = "" 
    data = construct_cal_year(year)
    data.pop(0)
    
    for month in range(12):
        for week in range(len(data[month])):
            result += data[month][week] + "\n"
            if week == 0:
                result += "  S  M  T  W  T  F  S\n"
        result += "\n"

    return result.strip()
    
#Question 3
def fact_rec(n):
    if n == 0: 
        return 1
    else: 
        answer = n * fact_rec(n-1)
        return answer
        
"""
Created on Wed Apr 10 21:34:14 2019

@author: Alice Jingyu
"""

#HW 1
# NB: you do not need to submit the 'get_data' function

def extract_values(values):
    first,second = values.split(" ", 1)
    answer = (int(first),int(second))
    return answer

def calc_ratios(values):
    if values[1] == 0:
        ratio = None
    else:
        ratio = values[0] / values[1]
    return ratio

#HW 2
# NB: the following line imports the 'display_calendar', 'lear_year', etc. functions
# (see the problem sheet PDF)
# DO NOT delete hw2_others.pyc from Vocareum :-)
from hw2_others import *

# You should ONLY submit the 'display_calendar_modified' function

def display_calendar_modified(year, month):
    if month == None: 
        calendar = display_calendar(year)
    else: 
        month_i_need = (construct_cal_year(year)[month])
        calendar = ""
        
        for week in range(len(month_i_need)):
            calendar += month_i_need[week] + "\n"
            if week == 0:
                calendar += "  S  M  T  W  T  F  S\n"
        calendar += "\n"

    return calendar.strip()
        
